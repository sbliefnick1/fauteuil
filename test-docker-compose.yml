version: '3.5'
services:
    redis:
        image: redis:4.0.8
        ports:
            - "6379:6379"
        networks:
            - skynet
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.labels.class == celred]

    postgres:
        image: postgres:10.3
        environment:
            - POSTGRES_USER_FILE=/run/secrets/pg_user
            - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
            - POSTGRES_DB_FILE=/run/secrets/pg_db
        volumes:
            - pgdata:/var/lib/postgresql/data/
        ports:
            - "5432:5432"
        networks:
            - skynet
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.labels.type == postgres]
        secrets:
            - pg_user
            - pg_password
            - pg_db

    flower:
        image: sbliefnick/fauteuil:test-latest
        depends_on:
            - redis
        networks:
            - skynet
        ports:
            - "5555:5555"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.labels.class == celred]
        command: flower

    webserver:
        image: sbliefnick/fauteuil:test-latest
        depends_on:
            - postgres
            - redis
        volumes:
            - pgdata:/var/lib/postgresql/data/
        ports:
            - "8080:8080"
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3
        networks:
            - skynet
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manager]
        secrets:
            - ebi_db_conn
            - fernet_key
            - flask_secret_key
            - pg_user
            - pg_password
            - pg_db
            - freetds.conf
            - odbc.ini
        command: webserver

    scheduler:
        image: sbliefnick/fauteuil:test-latest
        depends_on:
            - webserver
        networks:
            - skynet
        volumes:
            - pgdata:/var/lib/postgresql/data/
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manager]
        secrets:
            - ebi_db_conn
            - fernet_key
            - flask_secret_key
            - pg_user
            - pg_password
            - pg_db
            - freetds.conf
            - odbc.ini
        command: scheduler

    worker:
        image: sbliefnick/fauteuil:test-latest
        depends_on:
            - scheduler
        networks:
            - skynet
        deploy:
            replicas: 2
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.labels.role == worker]
        secrets:
            - ebi_db_conn
            - fernet_key
            - flask_secret_key
            - pg_user
            - pg_password
            - pg_db
            - freetds.conf
            - odbc.ini
        command: worker

    visualizer:
        image: dockersamples/visualizer:stable
        ports:
            - "9090:8080"
        stop_grace_period: 1m
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        deploy:
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manager]

networks:
    skynet:

volumes:
    pgdata:

secrets:
    pg_user:
        external: true
    pg_password:
        external: true
    pg_db:
        external: true
    fernet_key:
        external: true
    flask_secret_key:
        external: true
    ebi_db_conn:
        external: true
    freetds.conf:
        external: true
    odbc.ini:
        external: true